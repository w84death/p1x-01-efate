[gd_resource type="VisualShader" load_steps=26 format=2]

[ext_resource path="res://materials/noise_512.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarConstant" id=1]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=3]
constant = 0.05

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 0.8

[sub_resource type="VisualShaderNodeVectorLen" id=5]

[sub_resource type="VisualShaderNodeVectorCompose" id=8]

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "vertex"

[sub_resource type="VisualShaderNodeTexture" id=10]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeColorUniform" id=25]
output_port_for_preview = 0
uniform_name = "COLOUR"

[sub_resource type="VisualShaderNodeColorOp" id=26]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeColorOp" id=27]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeVectorFunc" id=28]

[sub_resource type="VisualShaderNodeInput" id=12]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id=13]
constant = Vector3( 0.5, 0.5, 0.5 )

[sub_resource type="VisualShaderNodeVectorOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=16]

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=18]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0.5 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=19]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id=20]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=21]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVec3Uniform" id=29]
uniform_name = "SCALE"

[sub_resource type="VisualShaderNodeTexture" id=22]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=24]

[resource]
code = "shader_type spatial;
render_mode world_vertex_coords, vertex_lighting;

uniform sampler2D tex_vtx_2;uniform vec3 SCALE;
uniform sampler2D tex_frg_2;uniform vec4 COLOUR : hint_color;



void vertex() {
// Input:3
	vec3 n_out3p0;
	n_out3p0 = VERTEX;

// Input:11
	vec3 n_out11p0;
	n_out11p0 = VERTEX;

// VectorOp:12
	vec3 n_in12p1 = vec3(0.50000,0.50000,0.50000);
	vec3 n_out12p0;
	n_out12p0 = n_out11p0 * n_in12p1;

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	vec4 tex_vtx_2_read = texture( tex_vtx_2 , n_out12p0.xy );
	n_out2p0 = tex_vtx_2_read.rgb;
	n_out2p1 = tex_vtx_2_read.a;

// VectorUniform:19
	vec3 n_out19p0;
	n_out19p0 = SCALE;

// VectorOp:18
	vec3 n_out18p0;
	n_out18p0 = n_out2p0 * n_out19p0;

// Input:13
	vec3 n_out13p0;
	n_out13p0 = NORMAL;

// VectorOp:14
	vec3 n_out14p0;
	n_out14p0 = n_out18p0 * n_out13p0;

// VectorOp:6
	vec3 n_out6p0;
	n_out6p0 = n_out3p0 + n_out14p0;

// Output:0
	VERTEX = n_out6p0;

}

void fragment() {
// Input:3
	vec3 n_out3p0;
	n_out3p0 = vec3(UV,0.0);

// Vector:5
	vec3 n_out5p0;
	n_out5p0 = vec3(0.500000,0.500000,0.500000);

// VectorOp:6
	vec3 n_out6p0;
	n_out6p0 = n_out3p0 * n_out5p0;

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	vec4 tex_frg_2_read = texture( tex_frg_2 , n_out6p0.xy );
	n_out2p0 = tex_frg_2_read.rgb;
	n_out2p1 = tex_frg_2_read.a;

// Input:19
	vec3 n_out19p0;
	n_out19p0 = VERTEX;

// VectorLen:15
	float n_out15p0;
	n_out15p0 = length( n_out19p0 );

// VectorCompose:18
	vec3 n_out18p0;
	n_out18p0 = vec3( n_out15p0 , n_out15p0 , n_out15p0 );

// VectorFunc:23
	vec3 n_out23p0;
	n_out23p0=normalize(n_out18p0);

// ColorUniform:20
	vec3 n_out20p0;
	float n_out20p1;
	n_out20p0 = COLOUR.rgb;
	n_out20p1 = COLOUR.a;

// ColorOp:22
	vec3 n_out22p0;
	{
		float base=n_out23p0.x;
		float blend=n_out20p0.x;
		if (base < 0.5) {
			n_out22p0.x = 2.0 * base * blend;
		} else {
			n_out22p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base=n_out23p0.y;
		float blend=n_out20p0.y;
		if (base < 0.5) {
			n_out22p0.y = 2.0 * base * blend;
		} else {
			n_out22p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base=n_out23p0.z;
		float blend=n_out20p0.z;
		if (base < 0.5) {
			n_out22p0.z = 2.0 * base * blend;
		} else {
			n_out22p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// ColorOp:21
	vec3 n_out21p0;
	{
		float base=n_out2p0.x;
		float blend=n_out22p0.x;
		if (base < 0.5) {
			n_out21p0.x = 2.0 * base * blend;
		} else {
			n_out21p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base=n_out2p0.y;
		float blend=n_out22p0.y;
		if (base < 0.5) {
			n_out21p0.y = 2.0 * base * blend;
		} else {
			n_out21p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base=n_out2p0.z;
		float blend=n_out22p0.z;
		if (base < 0.5) {
			n_out21p0.z = 2.0 * base * blend;
		} else {
			n_out21p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Scalar:9
	float n_out9p0;
	n_out9p0 = 0.000000;

// Scalar:10
	float n_out10p0;
	n_out10p0 = 1.000000;

// Scalar:12
	float n_out12p0;
	n_out12p0 = 0.050000;

// Scalar:13
	float n_out13p0;
	n_out13p0 = 0.800000;

// Output:0
	ALBEDO = n_out21p0;
	METALLIC = n_out9p0;
	ROUGHNESS = n_out10p0;
	RIM = n_out12p0;
	RIM_TINT = n_out13p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -27, 246.74 )
flags/vertex_lighting = true
flags/world_vertex_coords = true
nodes/vertex/0/position = Vector2( 1140, 120 )
nodes/vertex/2/node = SubResource( 22 )
nodes/vertex/2/position = Vector2( 200, 100 )
nodes/vertex/3/node = SubResource( 23 )
nodes/vertex/3/position = Vector2( 760, 60 )
nodes/vertex/6/node = SubResource( 24 )
nodes/vertex/6/position = Vector2( 960, 60 )
nodes/vertex/11/node = SubResource( 17 )
nodes/vertex/11/position = Vector2( -220, 240 )
nodes/vertex/12/node = SubResource( 18 )
nodes/vertex/12/position = Vector2( -20, 200 )
nodes/vertex/13/node = SubResource( 19 )
nodes/vertex/13/position = Vector2( 600, 260 )
nodes/vertex/14/node = SubResource( 20 )
nodes/vertex/14/position = Vector2( 760, 140 )
nodes/vertex/18/node = SubResource( 21 )
nodes/vertex/18/position = Vector2( 420, 160 )
nodes/vertex/19/node = SubResource( 29 )
nodes/vertex/19/position = Vector2( 220, 320 )
nodes/vertex/connections = PoolIntArray( 12, 0, 2, 0, 11, 0, 12, 0, 13, 0, 14, 1, 3, 0, 6, 0, 14, 0, 6, 1, 6, 0, 0, 0, 18, 0, 14, 0, 2, 0, 18, 0, 19, 0, 18, 1 )
nodes/fragment/0/position = Vector2( 1000, 100 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( 440, 0 )
nodes/fragment/3/node = SubResource( 12 )
nodes/fragment/3/position = Vector2( 20, 120 )
nodes/fragment/5/node = SubResource( 13 )
nodes/fragment/5/position = Vector2( 0, 220 )
nodes/fragment/6/node = SubResource( 14 )
nodes/fragment/6/position = Vector2( 260, 120 )
nodes/fragment/9/node = SubResource( 16 )
nodes/fragment/9/position = Vector2( 740, 240 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 740, 320 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 740, 400 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 740, 460 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( 0, 320 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( 60, 400 )
nodes/fragment/19/node = SubResource( 9 )
nodes/fragment/19/position = Vector2( -200, 320 )
nodes/fragment/20/node = SubResource( 25 )
nodes/fragment/20/position = Vector2( 280, 240 )
nodes/fragment/21/node = SubResource( 26 )
nodes/fragment/21/position = Vector2( 740, 80 )
nodes/fragment/22/node = SubResource( 27 )
nodes/fragment/22/position = Vector2( 520, 260 )
nodes/fragment/23/node = SubResource( 28 )
nodes/fragment/23/position = Vector2( 260, 420 )
nodes/fragment/connections = PoolIntArray( 6, 0, 2, 0, 3, 0, 6, 0, 5, 0, 6, 1, 10, 0, 0, 3, 13, 0, 0, 11, 2, 0, 21, 0, 21, 0, 0, 0, 9, 0, 0, 2, 19, 0, 15, 0, 20, 0, 22, 1, 22, 0, 21, 1, 15, 0, 18, 0, 15, 0, 18, 1, 15, 0, 18, 2, 18, 0, 23, 0, 23, 0, 22, 0, 12, 0, 0, 10 )

