[gd_resource type="VisualShader" load_steps=16 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=1]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=2]

[sub_resource type="VisualShaderNodeScalarConstant" id=3]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "shift"

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id=7]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorCompose" id=9]

[sub_resource type="VisualShaderNodeVectorDecompose" id=10]

[sub_resource type="VisualShaderNodeScalarOp" id=11]

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=15]
uniform_name = "sinus_scale"

[resource]
code = "shader_type spatial;
uniform float shift;
uniform float sinus_scale;



void vertex() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = VERTEX;

// VectorDecompose:4
	float n_out4p0;
	float n_out4p1;
	float n_out4p2;
	n_out4p0 = n_out2p0.x;
	n_out4p1 = n_out2p0.y;
	n_out4p2 = n_out2p0.z;

// ScalarOp:7
	float n_in7p1 = 0.50000;
	float n_out7p0;
	n_out7p0 = n_out4p0 * n_in7p1;

// ScalarUniform:11
	float n_out11p0;
	n_out11p0 = shift;

// ScalarOp:10
	float n_out10p0;
	n_out10p0 = n_out7p0 + n_out11p0;

// ScalarFunc:6
	float n_out6p0;
	n_out6p0 = sin(n_out10p0);

// ScalarUniform:9
	float n_out9p0;
	n_out9p0 = sinus_scale;

// ScalarOp:8
	float n_out8p0;
	n_out8p0 = n_out6p0 * n_out9p0;

// ScalarOp:5
	float n_out5p0;
	n_out5p0 = n_out4p2 + n_out8p0;

// VectorCompose:3
	vec3 n_out3p0;
	n_out3p0 = vec3( n_out4p0 , n_out4p1 , n_out5p0 );

// Output:0
	VERTEX = n_out3p0;

}

void fragment() {
// Color:2
	vec3 n_out2p0;
	float n_out2p1;
	n_out2p0 = vec3(0.000000,0.000000,0.000000);
	n_out2p1 = 1.000000;

// Scalar:3
	float n_out3p0;
	n_out3p0 = 0.000000;

// Scalar:4
	float n_out4p0;
	n_out4p0 = 1.000000;

// Output:0
	ALBEDO = n_out2p0;
	METALLIC = n_out3p0;
	ROUGHNESS = n_out4p0;
	SPECULAR = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 271, 64 )
nodes/vertex/0/position = Vector2( 1540, 100 )
nodes/vertex/2/node = SubResource( 8 )
nodes/vertex/2/position = Vector2( 60, 120 )
nodes/vertex/3/node = SubResource( 9 )
nodes/vertex/3/position = Vector2( 1160, 120 )
nodes/vertex/4/node = SubResource( 10 )
nodes/vertex/4/position = Vector2( 240, 120 )
nodes/vertex/5/node = SubResource( 11 )
nodes/vertex/5/position = Vector2( 960, 200 )
nodes/vertex/6/node = SubResource( 12 )
nodes/vertex/6/position = Vector2( 560, 260 )
nodes/vertex/7/node = SubResource( 13 )
nodes/vertex/7/position = Vector2( 380, 260 )
nodes/vertex/8/node = SubResource( 14 )
nodes/vertex/8/position = Vector2( 780, 260 )
nodes/vertex/9/node = SubResource( 15 )
nodes/vertex/9/position = Vector2( 560, 380 )
nodes/vertex/10/node = SubResource( 4 )
nodes/vertex/10/position = Vector2( 340, 380 )
nodes/vertex/11/node = SubResource( 5 )
nodes/vertex/11/position = Vector2( 100, 380 )
nodes/vertex/12/node = SubResource( 6 )
nodes/vertex/12/position = Vector2( 1000, 380 )
nodes/vertex/13/node = SubResource( 7 )
nodes/vertex/13/position = Vector2( 1280, 300 )
nodes/vertex/connections = PoolIntArray( 2, 0, 4, 0, 4, 0, 3, 0, 4, 1, 3, 1, 4, 2, 5, 0, 6, 0, 8, 0, 8, 0, 5, 1, 9, 0, 8, 1, 4, 0, 7, 0, 7, 0, 10, 0, 10, 0, 6, 0, 11, 0, 10, 1, 3, 0, 0, 0, 5, 0, 3, 2 )
nodes/fragment/0/position = Vector2( 800, 40 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 480, 80 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 500, 200 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 480, 320 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 0, 2, 4, 0, 0, 3, 3, 0, 0, 4 )

