[gd_resource type="VisualShader" load_steps=17 format=2]

[ext_resource path="res://materials/noise_1024.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeVectorDecompose" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeVec3Constant" id=6]
constant = Vector3( 0.5, 0.5, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=7]

[sub_resource type="VisualShaderNodeScalarConstant" id=8]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id=10]

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=13]

[sub_resource type="VisualShaderNodeVectorCompose" id=14]

[sub_resource type="VisualShaderNodeVectorDecompose" id=15]

[resource]
code = "shader_type spatial;
render_mode blend_add, depth_draw_alpha_prepass, world_vertex_coords, shadows_disabled, ambient_light_disabled;

uniform sampler2D tex_frg_3;


void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// Vector:6
	vec3 n_out6p0;
	n_out6p0 = vec3(0.500000,0.500000,1.000000);

// VectorOp:5
	vec3 n_out5p0;
	n_out5p0 = n_out2p0 * n_out6p0;

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	vec4 tex_frg_3_read = texture( tex_frg_3 , n_out5p0.xy );
	n_out3p0 = tex_frg_3_read.rgb;
	n_out3p1 = tex_frg_3_read.a;

// VectorDecompose:10
	float n_out10p0;
	float n_out10p1;
	float n_out10p2;
	n_out10p0 = n_out3p0.x;
	n_out10p1 = n_out3p0.y;
	n_out10p2 = n_out3p0.z;

// ScalarOp:11
	float n_in11p1 = 0.10000;
	float n_out11p0;
	n_out11p0 = n_out10p0 * n_in11p1;

// Scalar:7
	float n_out7p0;
	n_out7p0 = 0.000000;

// Scalar:8
	float n_out8p0;
	n_out8p0 = 1.000000;

// Output:0
	ALBEDO = n_out3p0;
	ALPHA = n_out11p0;
	METALLIC = n_out7p0;
	ROUGHNESS = n_out8p0;

}

void light() {
// Output:0

}
"
modes/blend = 1
modes/depth_draw = 3
flags/ambient_light_disabled = true
flags/shadows_disabled = true
flags/world_vertex_coords = true
nodes/vertex/0/position = Vector2( 1220, 100 )
nodes/vertex/4/node = SubResource( 11 )
nodes/vertex/4/position = Vector2( 240, 180 )
nodes/vertex/5/node = SubResource( 12 )
nodes/vertex/5/position = Vector2( 440, 80 )
nodes/vertex/7/node = SubResource( 13 )
nodes/vertex/7/position = Vector2( 1020, 80 )
nodes/vertex/8/node = SubResource( 14 )
nodes/vertex/8/position = Vector2( 800, 180 )
nodes/vertex/9/node = SubResource( 15 )
nodes/vertex/9/position = Vector2( 540, 180 )
nodes/vertex/10/node = SubResource( 9 )
nodes/vertex/10/position = Vector2( 840, 300 )
nodes/vertex/11/node = SubResource( 10 )
nodes/vertex/11/position = Vector2( 1040, 200 )
nodes/vertex/connections = PoolIntArray( 8, 0, 7, 1, 5, 0, 7, 0, 9, 0, 8, 0, 9, 1, 8, 2, 10, 0, 11, 1, 7, 0, 11, 0, 4, 0, 9, 0 )
nodes/fragment/0/position = Vector2( 1140, 140 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( 60, 120 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( 440, 20 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( 240, 160 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( 20, 240 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( 660, 300 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( 660, 380 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 640, 160 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 840, 140 )
nodes/fragment/connections = PoolIntArray( 2, 0, 5, 0, 5, 0, 3, 0, 6, 0, 5, 1, 7, 0, 0, 2, 8, 0, 0, 3, 3, 0, 0, 0, 3, 0, 10, 0, 11, 0, 0, 1, 10, 0, 11, 0 )

